import asyncio
from typing import List, Dict, Any
import logging
from concurrent.futures import ThreadPoolExecutor
from .genome_analyzer import GenomeAnalyzer
from .genome_visualizer import GenomeVisualizer

class BatchProcessor:
    def __init__(self, max_workers: int = 4):
        self.logger = logging.getLogger(__name__)
        self.max_workers = max_workers
        self.analyzer = GenomeAnalyzer()
        self.visualizer = GenomeVisualizer()
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
        
    async def process_batch(self, sequences: List[str]) -> List[Dict[str, Any]]:
        """Asynchronously process genome sequences in batches"""
        try:
            # Split sequences into batches
            batch_size = len(sequences) // self.max_workers + 1
            batches = [sequences[i:i + batch_size] for i in range(0, len(sequences), batch_size)]
            
            # Create async tasks
            tasks = []
            for batch in batches:
                task = asyncio.get_event_loop().run_in_executor(
                    self.executor,
                    self.analyzer.batch_analyze,
                    batch
                )
                tasks.append(task)
                
            # Wait for all tasks to complete
            results = await asyncio.gather(*tasks)
            
            # Merge results
            return [item for sublist in results for item in sublist]
        except Exception as e:
            self.logger.error(f"Batch processing error: {str(e)}")
            raise
            
    async def generate_visualizations(self, analysis_results: List[Dict[str, Any]]) -> Dict[str, bytes]:
        """Generate visualizations from analysis results"""
        try:
            # Extract data
            gc_contents = [result['gc_content'] for result in analysis_results]
            lengths = [result['length'] for result in analysis_results]
            quality_scores = [result['quality_score'] for result in analysis_results]
            
            # Generate plots in parallel
            tasks = [
                asyncio.get_event_loop().run_in_executor(
                    self.executor,
                    self.visualizer.plot_gc_content,
                    sum(gc_contents) / len(gc_contents)
                ),
                asyncio.get_event_loop().run_in_executor(
                    self.executor,
                    self.visualizer.plot_sequence_length,
                    lengths
                ),
                asyncio.get_event_loop().run_in_executor(
                    self.executor,
                    self.visualizer.plot_quality_scores,
                    quality_scores
                )
            ]
            
            # Wait for all plots to be generated
            gc_plot, length_plot, quality_plot = await asyncio.gather(*tasks)
            
            return {
                'gc_content': gc_plot.getvalue(),
                'sequence_length': length_plot.getvalue(),
                'quality_scores': quality_plot.getvalue()
            }
        except Exception as e:
            self.logger.error(f"Visualization generation error: {str(e)}")
            raise
            
    def __del__(self):
        """Clean up resources"""
        self.executor.shutdown() 
